<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[自由]]></title>
  <link href="http://blog.xiaogaozi.org/atom.xml" rel="self"/>
  <link href="http://blog.xiaogaozi.org/"/>
  <updated>2012-10-13T23:20:38+08:00</updated>
  <id>http://blog.xiaogaozi.org/</id>
  <author>
    <name><![CDATA[小高子]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 Bootstrap 的几个问题]]></title>
    <link href="http://blog.xiaogaozi.org/2012/10/13/some-issues-about-using-bootstrap/"/>
    <updated>2012-10-13T21:24:00+08:00</updated>
    <id>http://blog.xiaogaozi.org/2012/10/13/some-issues-about-using-bootstrap</id>
    <content type="html"><![CDATA[<h2>Responsive 与 Modal</h2>

<p>在开启 responsive 后，小屏幕设备上显示 modal 时会变成一闪而过，然后浮动窗口就不见了。具体效果可以缩小浏览器尺寸，在<a href="http://twitter.github.com/bootstrap/javascript.html#modals">这个页面</a>的 Live demo 点击「Launch demo modal」看到。<a href="https://github.com/twitter/bootstrap/issues/2130">Issue #2130</a> 专门讨论了这个问题，目前比较好的解决办法是使用<a href="http://niftylettuce.github.com/twitter-bootstrap-jquery-plugins">这个插件</a>，根据页面大小来动态调整 modal 的位置，不过貌似用了之后 modal 那个由上至下显示的动画就没有了。这个 issue 现在还处于开启状态，看来官方短期内是不会解决这个问题的。</p>

<h2>Responsive 与 Navbar</h2>

<p>responsive 模式下的 navbar 显示效果很赞，但是有一个很令人费解的事情，默认情况下所有 dropdown menu 都是展开的，对于使用多个菜单项，且子菜单条目很多的场景这是不能接受的。于是 <a href="https://github.com/twitter/bootstrap/issues/3184">Issue #3184</a> 出现了，这次的方案比较 hack，需要修改 bootstrap-responsive.css，将 <code>.nav-collapse .dropdown-menu</code> 里的 <code>display: block;</code> 注释掉。这时你会惊喜地发现 dropdown menu 默认折叠了，点击也能展开子菜单。但是（总是有很多但是），在触屏设备上子菜单是选不中的！托 <a href="http://www.filod.net">filod</a> 同学的福，修改 bootstrap-dropdown.js 中的一段代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/* APPLY TO STANDARD DROPDOWN ELEMENTS</span>
</span><span class='line'><span class="cm"> * =================================== */</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;html&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click.dropdown.data-api touchstart.dropdown.data-api&#39;</span><span class="p">,</span> <span class="nx">clearMenus</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click.dropdown touchstart.dropdown.data-api&#39;</span><span class="p">,</span> <span class="s1">&#39;.dropdown form&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">e</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">()</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click.dropdown.data-api touchstart.dropdown.data-api&#39;</span>  <span class="p">,</span> <span class="nx">toggle</span><span class="p">,</span> <span class="nx">Dropdown</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toggle</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;keydown.dropdown.data-api touchstart.dropdown.data-api&#39;</span><span class="p">,</span> <span class="nx">toggle</span> <span class="o">+</span> <span class="s1">&#39;, [role=menu]&#39;</span> <span class="p">,</span> <span class="nx">Dropdown</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">keydown</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里同时监听了 click 和 touchstart 事件，于是在触屏设备上先有 touchstart 将子菜单隐藏，再有 click 点击到隐藏后该位置的菜单项，因此你永远都不可能点到想点的子菜单。根本原因也是因为我们之前注释了 <code>display: block;</code> 引起，改变了 Bootstrap 的使用场景，于是 JS 出现如此纰漏。解决方法便是不监听 touchstart 事件，虽然会造成些小问题，不过也算基本满足要求。这个 issue 官方明确<a href="https://github.com/twitter/bootstrap/issues/3184#issuecomment-8072507">表示</a>不会采纳，不过还是希望以后有机会增加一个开关选项给用户。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解 tornado.gen]]></title>
    <link href="http://blog.xiaogaozi.org/2012/09/21/understanding-tornado-dot-gen/"/>
    <updated>2012-09-21T01:56:00+08:00</updated>
    <id>http://blog.xiaogaozi.org/2012/09/21/understanding-tornado-dot-gen</id>
    <content type="html"><![CDATA[<p>Tornado 通过 <code>@asynchronous</code> decorator 来实现异步请求，但使用的时候必须将 request handler 和 callback 分离开，<code>tornado.gen</code> 模块可以帮助我们在一个函数里完成这两个工作。下面是官方的一个例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">GenAsyncHandler</span><span class="p">(</span><span class="n">RequestHandler</span><span class="p">):</span>
</span><span class='line'>    <span class="nd">@asynchronous</span>
</span><span class='line'>    <span class="nd">@gen.engine</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">http_client</span> <span class="o">=</span> <span class="n">AsyncHTTPClient</span><span class="p">()</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="k">yield</span> <span class="n">gen</span><span class="o">.</span><span class="n">Task</span><span class="p">(</span><span class="n">http_client</span><span class="o">.</span><span class="n">fetch</span><span class="p">,</span> <span class="s">&quot;http://example.com&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">do_something_with_response</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s">&quot;template.html&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里用到了两个 decorator 稍显复杂，第一个 <code>@asynchronous</code> 会首先被执行，它的主要工作就是将 <code>RequestHandler</code> 的 <code>_auto_finish</code> 属性置为 <code>false</code>，如下：</p>

<figure class='code'><figcaption><span>web.py</span><a href='https://github.com/facebook/tornado/blob/master/tornado/web.py#L1116'>download </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">asynchronous</span><span class="p">(</span><span class="n">method</span><span class="p">):</span>
</span><span class='line'>    <span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">method</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">_wsgi</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&quot;@asynchronous is not supported for WSGI apps&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_auto_finish</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">with</span> <span class="n">stack_context</span><span class="o">.</span><span class="n">ExceptionStackContext</span><span class="p">(</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">_stack_context_handle_exception</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">method</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着就是最重要的 <code>@gen.engine</code>，这里充分利用了 generator 的各种特性，首先来看 <code>@gen.engine</code> 的实现（我删减了部分代码以简化理解）：</p>

<figure class='code'><figcaption><span>gen.py</span><a href='https://github.com/facebook/tornado/blob/master/tornado/gen.py#L91'>download </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">engine</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="n">gen</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">gen</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">GeneratorType</span><span class="p">):</span>
</span><span class='line'>            <span class="n">runner</span> <span class="o">=</span> <span class="n">Runner</span><span class="p">(</span><span class="n">gen</span><span class="p">)</span>
</span><span class='line'>            <span class="n">runner</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span></code></pre></td></tr></table></div></figure>


<p>局部变量 <code>gen</code> 代表第一段代码里的 <code>get</code> 函数，因为 <code>get</code> 包含了 <code>yield</code> 语句，因此成为了一个 generator。注意这里 <code>get</code> 并没有被执行，只是赋给了 <code>gen</code>。接下来是运行 <code>Runner</code> 对象的 <code>run</code> 函数。在理解 <code>run</code> 之前需要知道 generator 是通过调用 <code>next()</code> 或者 <code>send()</code> 来启动，启动之后会在遇到 <code>yield</code> 的地方 hold 住，然后将 <code>yield</code> 后面的语句的返回值返回给调用者，generator 此时即处于暂停运行状态，所有上下文都会保存。再次调用 <code>next()</code> 或 <code>send()</code> 便会恢复 generator 的运行，如果不再遇到 <code>yield</code> 语句就会抛出 <code>StopIteration</code> 异常。在恢复运行的同时 <code>yield</code> 语句本身会有返回值，如果是通过调用 <code>next()</code> 来恢复的，那么返回值永远是 <code>None</code>，而如果是通过 <code>send()</code> 则返回值取决于传给 <code>send()</code> 的参数。更多关于 generator 的说明请参考<a href="http://docs.python.org/reference/expressions.html#yield-expressions">官方文档</a>。</p>

<p>结合第一段的示例代码，可以想到 <code>run</code> 干的工作可能就是启动 generator，然后获得 <code>gen.Task</code> 对象并调用 <code>http_client.fetch</code> 函数，等回调回来之后恢复 generator 的运行，最后将回调的返回值通过 <code>send()</code> 赋给 <code>response</code>。下面是我简化后的代码。</p>

<figure class='code'><figcaption><span>gen.py</span><a href='https://github.com/facebook/tornado/blob/master/tornado/gen.py#L322'>download </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">yield_point</span><span class="o">.</span><span class="n">is_ready</span><span class="p">():</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="nb">next</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">yield_point</span><span class="o">.</span><span class="n">get_result</span><span class="p">()</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">yielded</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">gen</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">next</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">StopIteration</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">yielded</span><span class="p">,</span> <span class="n">YieldPoint</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">yield_point</span> <span class="o">=</span> <span class="n">yielded</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">yield_point</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>第 3 行检查回调是否完成，第一次运行 <code>run</code> 总是会返回 <code>True</code>。第 5 行获取回调的返回值，同样的第一次运行返回的是 <code>None</code>。将 <code>None</code> 传给 <code>send()</code> 启动 generator，<code>yielded</code> 即是 <code>gen.Task</code> 对象，第 12 行调用 <code>start</code> 开始运行我们真正需要运行的函数，对应到示例代码就是 <code>http_client.fetch</code> 函数，同时将 <code>Runner</code> 的 <code>result_callback</code> 作为回调函数。如下：</p>

<figure class='code'><figcaption><span>gen.py</span><a href='https://github.com/facebook/tornado/blob/master/tornado/gen.py#L374'>download </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">result_callback</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">inner</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">kwargs</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">args</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="n">Arguments</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">args</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">inner</span>
</span></code></pre></td></tr></table></div></figure>


<p>在得到回调返回值之后再次调用 <code>run</code>，通过 <code>get_result</code> 获取返回值，最后将返回值返回赋给 <code>response</code>，继续 request handler 的代码流程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[幸福]]></title>
    <link href="http://blog.xiaogaozi.org/2012/04/22/hello-xiamen/"/>
    <updated>2012-04-22T02:53:00+08:00</updated>
    <id>http://blog.xiaogaozi.org/2012/04/22/hello-xiamen</id>
    <content type="html"><![CDATA[<p>三月的深圳已经渐渐有了夏天的感觉，选择这个时候出游其实是为了给自己，还有兰姐一个清明小长假前的悠闲假期。曾经的惨痛经历告诉我，如果在公共假期旅行，即使再美丽的地方也会被摩肩接踵的人群弄得失去了本来的韵味。这不是一篇攻略，虽然我会穿插着讲述一些在旅行途中的境遇。我用我的双眼，Twitter，Instagram 和 foursqure 记录下了这短暂的三天旅程。</p>

<!-- more -->




<blockquote class="twitter-tweet tw-align-center"><p>出发 (@ Shenzhen Bao&#8217;an Int&#8217;l Airport (SZX)) <a href="http://t.co/TBiYXdRI" title="http://4sq.com/y1soP9">4sq.com/y1soP9</a></p>&mdash; 小高子 (@xiaogaozi) <a href="https://twitter.com/xiaogaozi/status/180795817618178048" data-datetime="2012-03-16T23:20:56+00:00">March 16, 2012</a></blockquote>


<script src="http://blog.xiaogaozi.org//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>买的折扣机票，很早来到机场，没有了托运，匆忙间忘了瓶瓶罐罐是不能带上飞机的，还好好心的安检美眉提醒我下次记得办托运。清晨的宝安机场还是充满了人群，让我感到甚是诧异，想象着他们都是去向何处。来到前往厦门的登机口，几个戴着草帽，穿着清新的女生丝毫掩饰不住对于未知旅途的向往。厦门恐怕是我见过的女性游客最集中的地方了，当然这是后话。意外地，我们被告知由于厦门大雾飞机延飞，无聊地在机场等候，拿出 Kindle 看「三体」。海航给每个人准备了一瓶矿泉水，一罐八宝粥和一代苏打饼干，跟兰姐笑称我们路上的干粮都有着落了。近两个小时的等待，终于，登上了去往厦门的航班。</p>

<blockquote class="twitter-tweet tw-align-center"><p>天气真好 (@ Xiamen Gaoqi Int‘l Airport | XMN) <a href="http://t.co/gmJS3kWh" title="http://4sq.com/wsmsDo">4sq.com/wsmsDo</a></p>&mdash; 小高子 (@xiaogaozi) <a href="https://twitter.com/xiaogaozi/status/180858836280811521" data-datetime="2012-03-17T03:31:21+00:00">March 17, 2012</a></blockquote>


<script src="http://blog.xiaogaozi.org//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>厦门的机场不大，出站和进站都在一层楼，让人觉得稍显拥挤。大雾之后的晴天着实让我热得受不了，有一种瞬间到了夏天的感觉，后来才听说我们来的前一天都还在下雨，看来我们运气不错。选择了坐公交到今晚住宿的地方，如果要去鼓浪屿的码头，可以先坐 L19 BRT 链接线到县后，然后上天桥坐快 1、快 2 直达第一码头。这趟公交走走停停，前前后后花了大概一个小时，再加上之前飞机晚点的两个小时，虽然起得很早，但还是接近中午才到，真够折腾的。我们住的地方在曾厝垵，在厦门著名的环岛路附近。几乎所有的攻略都会提到环岛路，环岛路很长很长，适合骑着自行车悠闲地一边吹着海风，一边沐浴阳光。虽然很想顺着环岛路沿途欣赏，但毕竟肚子要紧，得赶紧到住的地方放好行李。</p>

<p><img class="left" src="http://distilleryimage6.s3.amazonaws.com/c74a81726ff211e180c9123138016265_7.jpg" width="350" height="350" title="要有光，要有诚。" ></p>

<p>曾厝垵是一个传说中聚集了很多艺术青年的地方，其实整个厦门在行走间都会被蒙上一层文艺的感觉，我想这才是之所以吸引这么多女生来这里的原因。我们今晚要入住的旅馆老板也是因为喜欢厦门的感觉，才决定定居这里。如果一个城市能够散发某种独特的气质，那这个城市一定是吸引人的。曾厝垵旅馆很多，似乎是专门为游客安排。来之前选了评价还不错的<a href="http://www.douban.com/group/NorNorHouse/">洛洛家家庭旅馆</a>，家庭旅馆这种形式不知是从哪里发源，反正我是在准备来厦门之前才知道的。家庭旅馆顾名思义就是直接住在当地人家里，以这种最接近当地人的方式来了解和体味这个地方。同时，家庭旅馆也似乎蕴含着温馨、舒适的感觉，让身在异乡的人们不再孤独。</p>

<p><img class="right" src="http://distilleryimage1.s3.amazonaws.com/c04a0b30709311e18bb812313804a181_7.jpg" width="350" height="350" title="hush" ></p>

<p>选择洛洛家其实是看中了他家的大房子，还有主人收养的狗狗们。到了曾厝垵就打了电话询问该怎么走，穿过窄窄的巷子和路边装点别致的民居，洛洛家接待我们的姐姐已经等候在那里。快到门口时，见到了洛洛家著名的狗狗 hush，就是照片上这只啦。hush 似乎是在迎接客人的到来，领着我们一同进入了那幢大房子。这幢房子的主人现在不在，姐姐告诉我们老板在隔壁开了家西餐厅，现在主要都在经营那家店了。虽然洛洛家的房子已经不算很新，但是依旧能从几本厚厚的留言薄里看到这里曾经留下的欢乐。这幢小别墅有四层还是五层，我没上去仔细观察，因为我们今晚入住的是在隔壁的另一栋房子，虽然我当初其实是很想住现在这栋。洛洛家的主人喜欢养狗狗，也喜爱各种花草，不大的庭院里摆满了各种我叫不出名字的植物，狗狗们也很悠闲地在庭院中休憩。</p>

<p><img class="left" src="http://distilleryimage1.s3.amazonaws.com/c6451a48700211e1b9f1123138140926_7.jpg" width="350" height="350" title="厦门大学" ></p>

<p>放好行李，询问了姐姐附近都有些什么吃的以后，兰姐和我开始了我们第一天的旅程。午饭我们就近选择了一家沙县小吃，可能是因为太饿了吧，到现在我还在怀念那天中午吃的<a href="http://instagr.am/p/IQ0q0TrZ1U/">炒面</a>。接着就是坐车去厦门大学，曾厝垵离厦大不远，公交十多分钟左右就能到达，沿途还能欣赏环岛路的风景，路过厦大白城附近的沙滩浴场时发现果然还是人满为患，毕竟今天是周末。厦门大学被称作中国最美的大学，没有之一，这也让兰姐和我满怀期待。公交在厦大正门停下，正门对面各种店铺，看着很热闹的样子，不过话说大学一般不都是后门才繁华的么，也许厦大是一个例外吧。因为是周末，来厦大参观的人还是很多，自习室里的同学估计也见怪不怪了。厦大的美在于它古朴、典雅的建筑，和靠海这一得天独厚的地理优势，光是想到坐在美丽的校园里，迎着远处吹来的海风，或是在足球场上尽情奔跑，这样的恬淡对于我来说居然也显得如此弥足珍贵。很多当地人选择在厦大拍摄婚纱照，那天我们也遇见了好几对新人，记得<a href="http://mooogu.cn/blog/">蘑菇</a>的博主也是在厦门拍的，当时还极力推荐厦门本土的一个摄影师。不知怎么得我们就逛到了女生宿舍区，之前就听说厦大的宿舍很「豪华」，从外面看着还行，不过每间寝室倒是都装有空调，这个比我们当初那学校高级多了。穿过宿舍，来到了一个大湖边，比起宿舍区，这里显得嘈杂很多，不过令人惊喜的是湖面上居然游弋着几只黑天鹅。厦大应该很大，感觉我们可能只逛了其中一小部分，不过平时逛街都很能走的兰姐这时却闹着要出去了。于是选了最近的一个校门，没想到误打误撞到了传说中的南普陀寺。南普陀似乎是旅行团必经之地，附近的道路已经被大巴车弄得拥挤不堪，寺内更是人头攒动，我们没有选择进去，只是在赶路的同时眺望了一下里面。从厦大西南门往前走一小段路程就有一个公交站台，我们的下一站是中山路。</p>

<p><img class="right" src="http://distilleryimage2.s3.amazonaws.com/32d7aa3e701411e1b9f1123138140926_7.jpg" width="350" height="350" title="八婆婆烧仙草" ></p>

<p>在来之前对于中山路的印象感觉是类似于成都春熙路那样的地方，但到了才发现其实是两种风情。本来以为从厦大到中山路很远，结果坐了两三站就到了。下车的时候还怀疑是不是下错站了，因为跟想象中的貌似不太一样。厦门的街道跟青岛很像，都是窄窄的，房屋不高，两边的店铺普遍都是小小的，偶尔有大的也是商场。但是就热闹程度来说是丝毫不亚于春熙路的，并且由于街道很窄，行人们有时也不得不靠得很近。现在回想起来，我们逛中山路总结下来就是一个字：吃。来厦门之前就一直惦念着厦门当地的各种美食，跟兰姐号称要吃遍厦门有名的小吃。走上中山路正在发愁要从哪开始我的宏伟目标的时候，「八婆婆烧仙草」醒目的招牌进入了我的视野。厦门有名的小吃似乎都是要隐藏在小巷中的，人们纷纷涌入巷子，我们只能一步一步往前挪。在八婆婆的对面买了厦门有名的海蛎煎，再排队买了烧仙草，进去坐在八婆婆店里的楼上，一边吃着香喷喷的海蛎煎，一边喝着爽口的烧仙草，那一刻真的很幸福。稍作休息，我们便边走边逛，看到好吃的就买上一点，记住一定要在那些小巷中去找寻，中山路两边反而不会有什么特色小吃，有的只是麦当劳和它的好基友肯德基。不过有一个例外，那就是厦门当地很有名的「黄则和」，它家的花生汤很好喝，甜甜的，记得一定要加蛋。另外如果你是一个懒人，不想到处逛，到处找，那你可以选择只去黄则和，因为那里几乎可以吃到厦门所有的特色小吃，不一定最好吃，但味道肯定不会差。不知不觉已经逛到了晚上，我们准备去吃鼎鼎有名的「月华沙茶面」，这家店真心不好找，幸亏还有地图。周围的店铺中只有这家门口围满了人群，应该都是慕名而来。沙茶面里可以配很多料，鸡肉、鱼丸、鸭腱啊这些，但是精髓应该是在最后加上的汤汁吧，总之这种味道只有在亲口尝过之后才有感觉。</p>

<p><img class="left" src="http://distilleryimage1.s3.amazonaws.com/7cabeaa270e711e1b9f1123138140926_7.jpg" width="350" height="350" title="张三疯" ></p>

<p>第二天一早告别了洛洛家，便到码头准备登船去鼓浪屿，没想到又遇上大雾，码头停船（我们真是跟大雾有缘啊，=.=）。我们过不去，鼓浪屿岛上的人也过不来，真是纠结。只好又到马路对面的中山路闲逛，与夜晚的热闹相比，清晨的中山路显得格外安宁。因为没什么店铺开着，便进了肯德基坐坐休息。大概等到将近 11 点码头才重新恢复航行，从早上开始一直聚集的人流都一窝蜂地朝渡船走去，准确地说应该是被挤得慢慢往前挪。之前看攻略都说鼓浪屿的轮渡是去的时候不要钱，回来再买票，不过现在已经反过来了，不知是不是为了缓解岛上的客流压力。但其实只要不是十一这种全国人民皆放假的节日，因为鼓浪屿还是很大的，在岛上基本感觉不出人很多的样子，只有龙头路那片儿一直都很热闹。鼓浪屿是一个拥有很多故事的地方，人们来到这里都是想要找到属于自己的那一个。不一样的人会对鼓浪屿有不一样的感受，有人会觉得这里很文艺，有人会觉得这里很多好吃的，有人会觉得这里生活很闲适，有人会觉得这就是一坐普普通通的岛屿。无论如何，鼓浪屿在我心中有它独一无二的魅力，人们愿意在这里寄托自己的感情，我也不例外。<a href="http://www.naya-hotel.com/">娜雅家庭旅馆</a>是鼓浪屿上有名的家庭旅馆，第一眼看过后就喜欢上了他们对于房间的装饰风格，很温馨，也很别致。本来想订老店娜雅的，但后来考虑到可能年久失修，住着会不太舒服，于是订了价位介于海岸和娜雅之间的<a href="http://www.naya-hotel.com/2009/F-1.htm">猫窝旅馆</a>。这家旅馆真是火爆得很，我提前一个月订就已经只剩一间房了，有想要入住的同学记得再提前一点预订，才能选到自己心仪的房间。入住猫窝可以免费去张三疯喝杯招牌奶茶，房间里也备有赵小姐的红茶和绿茶以供品尝。回来后才后悔当初没有带点赵小姐的纯手工馅饼，不过幸好他们有<a href="http://gulangyumisszhao.taobao.com/">淘宝店</a>，可以弥补我的遗憾。鼓浪屿上有名的店很多，好吃的东西也很多，如果可以的话，最好在这里多住几天，慢慢品味。现在鼓浪屿上似乎流行盖章本，就是一个用来收集各个店铺印章的小本子，有点世博护照本的意思，于是往往大家到一家店干的第一件事情就是问老板有没有印章。关于鼓浪屿套票，我觉得第一次来还是有必要去看看的，套票上的景点都是远离龙头路中心区的地方，这给了你很多深入小巷的机会。不过套票上的景点也是旅行团必经之地，所以要做好遇上拥挤人潮的准备。走累了，就回到龙头路，找家小店，进去坐坐休息。鼓浪屿上的「叶氏麻糍」很有名气，号称中国最小的老字号，但是这家「店」（其实不能算店，就是一辆手推车而已）实在太小，虽然位于龙头路中心区，但是我们路过好几次居然都没有发现，后来也是靠地图才找到的。晚上拉着兰姐出去干了一件我蓄谋已久的事情，就是给我的朋友们寄明信片，我觉得寄明信片是一个很好的分享快乐的方式，可以让收到的人也似乎跟随你到达这个地方，虽然我们可能隔绝千山万水。最后我想说的是鼓浪屿上美女真多，简直是放眼望去皆美女，并且草帽加长裙似乎已然成了标配，果然文艺的地方一般美女都会多点。</p>

<p><img class="right" src="http://distilleryimage7.s3.amazonaws.com/79b095c2717e11e19e4a12313813ffc0_7.jpg" width="350" height="350" title="四菜一汤" ></p>

<p>第三天我们选择了去看福建民居——土楼，清晨恋恋不舍地告别了鼓浪屿，同岛上上班、上学的居民一起乘船离开。由于土楼坐落的位置一般比较偏僻，便联系了一家<a href="http://www.fujiantulou.com/">当地的旅行社</a>土楼一日游。我们去看的是南靖土楼，只是因为听说永定那边由于过早开发，现在商业化氛围已经很浓。之所以想去看土楼，也是由于曾经看过的<a href="http://www.xxbt.com/dahai">一部动画</a>，当时对这种造型独特的房屋印象很深，便一直想要亲眼目睹。土楼是不允许上到楼上去的，这稍稍让我感到有些遗憾，楼下一般都摆满了各种当地特色，主要以茶叶居多，兰姐买了点带回来，于是我们也渐渐觉得茶也是挺好喝的。这一路也够折腾的，来回花了将近六个小时，回到厦门的时候都已经天黑了。在中山路边的台湾小吃街吃了点东西，便坐 BRT 去机场准备回家了。</p>

<blockquote class="twitter-tweet tw-align-center"><p>再见，厦门。 (@ Xiamen Gaoqi Int‘l Airport | XMN w/ 4 others) <a href="http://t.co/RjDs9Hws" title="http://4sq.com/yA5ldM">4sq.com/yA5ldM</a></p>&mdash; 小高子 (@xiaogaozi) <a href="https://twitter.com/xiaogaozi/status/181737053917167618" data-datetime="2012-03-19T13:41:04+00:00">March 19, 2012</a></blockquote>


<script src="http://blog.xiaogaozi.org//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>三天的旅程让我爱上了厦门这座建在小岛上的城市，如果有机会，我还想去洛洛家看看 hush，还想去中山路吃得荡气回肠，还想去鼓浪屿过过恬淡的生活，还想去好多好多没来得及去的地方。感谢<a href="http://bbs.qyer.com/">穷游</a>上帮助我的攻略，感谢厦门带给我们的幸福，借用娜雅的格言：如果幸福不在路上，那么一定在路的尽头。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shall We Play a Game?]]></title>
    <link href="http://blog.xiaogaozi.org/2011/11/06/shall-we-play-a-game/"/>
    <updated>2011-11-06T16:24:00+08:00</updated>
    <id>http://blog.xiaogaozi.org/2011/11/06/shall-we-play-a-game</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://farm7.static.flickr.com/6235/6317821194_c76b0fd4cf.jpg" title="The IMSAI 8080 computer used in WarGames." ></p>

<p>「<a href="http://www.imdb.com/title/tt0086567/">WarGames</a>」是一部 1983 年上映的科幻电影，作为投资仅 1200 万美元的小制作，在当年赢得了近 8000 万的票房。故事发生在美苏冷战时期，那个年代的电影，多多少少都会跟核威慑有关。这两个国家不管谁先发射导弹，那第三次世界大战就会爆发。电影中 NORAD（北美防空司令部）使用了一台叫做 WOPR 的超级计算机进行战事控制，这台计算机特别的地方在于它能自己模拟战争，模拟的过程就像在玩一个游戏（game）。某一天，我们的男主角天才高中生无意中侵入了这台电脑，出于好奇和好玩，启动了核战争游戏。不料这场模拟战争误使 NORAD 以为苏联发动了袭击，一度差点引爆真正的核对抗。最后在男主角和 WOPR 创造者的共同努力下及时终止了这场「战争」。</p>

<p>电影中男主角的人物原型来自一位叫做 David Scott Lewis 的黑客，这位老兄之后一直在搞机器人，后来按照他自己的话来说是「sold my soul to the bigger corporations」，分别在三星、Microsoft 和 Oracle 工作一段时间之后，他来到了中国，跟清华大学合作。现在貌似又搞太阳能去了。WOPR 的创造者 Dr. Stephen Falken 的原型来自著名的物理学家 Steven Hawking（是不是名字也很像？），WarGames 最初的剧本就是根据 Hawking 来写的，曾经还打算塑造一个坐在轮椅上的天体物理学家，但因为太容易让人联想到另一部讲述冷战的电影「Dr. Strangelove」而作罢。其实 Dr. Stephen Falken 对于人工智能的深入研究，倒让我觉得更像是 Alan Turing。</p>

<p>WarGames 对于此后的黑客文化产生了深远的影响。它创造了「firewall」这个词汇（方校长表示感谢）。电影中男主角入侵 NORAD 时使用的技术衍生出了「<a href="http://en.wikipedia.org/wiki/War_dialing">wardialing</a>」术语。wardialing 是指通过程序不断扫描电话号码来发现计算机 modem，早期的电话黑客即是使用的这种技术。著名的电话黑客（phone phreak）<a href="http://en.wikipedia.org/wiki/John_Draper">John Draper</a> 因为通过 wardialing 免费打电话而闻名，后来他将这项技术教给了 Steve Jobs 和 Steve Wozniak（是的，没错，就是乔帮主），帮主他们还因此赚了不少钱（帮主果然是个好商人，从小就懂得怎么把技术转为商业利益）。John Draper 后来受雇于 Apple，但这是后话了。wardialing 之后又衍生出了 <a href="http://en.wikipedia.org/wiki/Wardriving">wardriving</a>，通过扫描和收集 Wi-Fi 热点来进行攻击，之所以叫这个名字，是因为通常是在汽车里一边行驶，一边收集（这样说来 Google 的街景小车也算是 wardriving 了一把）。现在你可以在你的 iPhone 或者 Android 手机里装上一款 wardriving 软件试试看，我曾经试过，但是貌似效果不是很好。</p>

<p>还有一个人「深受」这部电影的影响，<a href="http://en.wikipedia.org/wiki/Kevin_Mitnick">Kevin Mitnick</a>，这个计算机安全界传说级的人物。当然不是说 Kevin 同学是因为这部电影走上的不归路，Kevin 同学搞入侵那会儿 WarGames 还没上映呢。Kevin 同学后来入狱时被拒绝接触任何电子设备，包括电话，是因为控诉律师相信他可以通过电话连接到 NORAD。据 Kevin 同学分析 WarGames 这部电影很大程度上使得公众相信这件事情是可以很容易办到的，其实他根本就没有入侵过 NORAD，通过电话来入侵也过于夸张。尽管如此，他还是被判单独监禁，从此传为计算机安全界的一段「佳话」⋯⋯</p>

<p>游戏界也从 WarGames 获益不少，1984 年<a href="http://en.wikipedia.org/wiki/WarGames_(video_game)">同名游戏</a>发布。2006 年一款叫做 <a href="http://en.wikipedia.org/wiki/Defcon_(video_game)">DEFCON</a> 的即时战略游戏发布，游戏画面与电影中 NORAD 指挥中心的大屏幕极为相似。DEFCON（defense readiness condition）是美国军方采用的警报等级，在 WarGames 电影中 NORAD 曾因模拟的苏联进攻一度将 DEFCON 等级提升到最高等级 1。著名的黑客大会 <a href="https://www.defcon.org/">DEF CON</a> 的名字也是来源于此。</p>

<p>或许 WarGames 对于电影史并没有太大的贡献，但却深深影响着那一代的 Geek 们。谨以此文献给那些逝去的先驱，RIP</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GYP 简介]]></title>
    <link href="http://blog.xiaogaozi.org/2011/10/29/introduction-to-gyp/"/>
    <updated>2011-10-29T22:55:00+08:00</updated>
    <id>http://blog.xiaogaozi.org/2011/10/29/introduction-to-gyp</id>
    <content type="html"><![CDATA[<p>说起项目构建工具，Linux 用户最熟悉的恐怕就是 <a href="http://en.wikipedia.org/wiki/GNU_build_system">Autotools</a>，它将编译安装这个步骤大大简化。但对于项目作者来说，想要使用 Autotools 生成有效的配置文件着实需要下一番功夫，用现在流行的话来说就是用户体验不够友好。对 Unix shell 的依赖，也使得 Autotools 天生对于跨平台支持不佳。</p>

<p>后来我从<a href="https://twitter.com/zhzhxtrrk">大猫</a>同学那里听说了 <a href="http://www.cmake.org/">CMake</a>，CMake 使用 C++ 编写，原生支持跨平台，不需要像 Autotools 那样写一堆的配置文件，只需一个 CMakeLists.txt 文件即可。简洁的使用方式，强大的功能使得我立马对 CMake 情有独钟。在后来的使用过程中，虽然会遇到一些因为使用习惯带来的小困扰，但我对于 CMake 还是基本满意的。直到我发现了 GYP。</p>

<p><a href="http://code.google.com/p/gyp/">GYP</a>（Generate Your Projects）是由 Chromium 团队开发的跨平台自动化项目构建工具，Chromium 便是通过 GYP 进行项目构建管理。为什么我要选择 GYP，而放弃 CMake 呢？功能上 GYP 和 CMake 很是相似，在我看来，它们的最大区别在于配置文件的编写方式和其中蕴含的思想。</p>

<p>编写 CMake 配置文件相比 Autotools 来说已经简化很多，一个最简单的配置文件只需要写上源文件及生成类型（可执行文件、静态库、动态库等）即可。对分支语句和循环语句的支持也使得 CMake 更加灵活。但是，CMake 最大的问题也是在这个配置文件，请看下面这个示例文件：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="nb">cmake_minimum_required</span><span class="p">(</span><span class="s">VERSION</span> <span class="s">2.8</span><span class="p">)</span>
</span><span class='line'><span class="nb">project</span><span class="p">(</span><span class="s">VP8</span> <span class="s">CXX</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">add_definitions</span><span class="p">(</span><span class="s">-Wall</span><span class="p">)</span>
</span><span class='line'><span class="nb">cmake_policy</span><span class="p">(</span><span class="s">SET</span> <span class="s">CMP0015</span> <span class="s">NEW</span><span class="p">)</span>
</span><span class='line'><span class="nb">include_directories</span><span class="p">(</span><span class="s2">&quot;include&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">link_directories</span><span class="p">(</span><span class="s2">&quot;lib&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span> <span class="s2">&quot;../lib&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">VP8SRC</span> <span class="s">VP8Encoder.cpp</span> <span class="s">VP8Decoder.cpp</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">if</span><span class="p">(</span><span class="s">X86</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_SYSTEM_NAME</span> <span class="s">Darwin</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_SYSTEM_PROCESSOR</span> <span class="s">i386</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_OSX_ARCHITECTURES</span> <span class="s2">&quot;i386&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">add_library</span><span class="p">(</span><span class="s">vp8</span> <span class="s">STATIC</span> <span class="o">${</span><span class="nv">VP8SRC</span><span class="o">}</span><span class="p">)</span>
</span><span class='line'><span class="nb">elseif</span><span class="p">(</span><span class="s">IPHONE</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">if</span><span class="p">(</span><span class="s">SIMULATOR</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">set</span><span class="p">(</span><span class="s">PLATFORM</span> <span class="s2">&quot;iPhoneSimulator&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">set</span><span class="p">(</span><span class="s">PROCESSOR</span> <span class="s">i386</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">set</span><span class="p">(</span><span class="s">ARCH</span> <span class="s2">&quot;i386&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">else</span><span class="p">()</span>
</span><span class='line'>        <span class="nb">set</span><span class="p">(</span><span class="s">PLATFORM</span> <span class="s2">&quot;iPhoneOS&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">set</span><span class="p">(</span><span class="s">PROCESSOR</span> <span class="s">arm</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">set</span><span class="p">(</span><span class="s">ARCH</span> <span class="s2">&quot;armv7&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">endif</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">set</span><span class="p">(</span><span class="s">SDKVER</span> <span class="s2">&quot;4.0&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">set</span><span class="p">(</span><span class="s">DEVROOT</span> <span class="s2">&quot;/Developer/Platforms/${PLATFORM}.platform/Developer&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">set</span><span class="p">(</span><span class="s">SDKROOT</span> <span class="s2">&quot;${DEVROOT}/SDKs/${PLATFORM}${SDKVER}.sdk&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_OSX_SYSROOT</span> <span class="s2">&quot;${SDKROOT}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_SYSTEM_NAME</span> <span class="s">Generic</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_SYSTEM_PROCESSOR</span> <span class="o">${</span><span class="nv">PROCESSOR</span><span class="o">}</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_COMPILER</span> <span class="s2">&quot;${DEVROOT}/usr/bin/g++&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_OSX_ARCHITECTURES</span> <span class="o">${</span><span class="nv">ARCH</span><span class="o">}</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">include_directories</span><span class="p">(</span><span class="s">SYSTEM</span> <span class="s2">&quot;${SDKROOT}/usr/include&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">link_directories</span><span class="p">(</span><span class="s">SYSTEM</span> <span class="s2">&quot;${SDKROOT}/usr/lib&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">add_definitions</span><span class="p">(</span><span class="s">-D_PHONE</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">add_library</span><span class="p">(</span><span class="s">vp8-armv7-darwin</span> <span class="s">STATIC</span> <span class="o">${</span><span class="nv">VP8SRC</span><span class="o">}</span><span class="p">)</span>
</span><span class='line'><span class="nb">endif</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>你能一眼看出这个配置文件干了什么吗？其实这个配置文件想要产生的目标（target）只有一个，就是通过 <code>${VP8SRC}</code> 编译生成的静态库，但因为加上了条件判断，及各种平台相关配置，使得这个配置文件看起来很是复杂。在我看来，编写 CMake 配置文件是一种线性思维，对于同一个目标的配置可能会零散分布在各个地方。而 GYP 则相当不同，GYP 的配置文件更多地强调模块化、结构化。看看下面这个示例文件：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s">&#39;targets&#39;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s">&#39;target_name&#39;</span><span class="p">:</span> <span class="s">&#39;foo&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;&lt;(library)&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&#39;dependencies&#39;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s">&#39;bar&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="s">&#39;defines&#39;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s">&#39;DEFINE_FOO&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;DEFINE_A_VALUE=value&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="s">&#39;include_dirs&#39;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s">&#39;..&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="s">&#39;sources&#39;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s">&#39;file1.cc&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;file2.cc&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="s">&#39;conditions&#39;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">[</span><span class="s">&#39;OS==&quot;linux&quot;&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>          <span class="s">&#39;defines&#39;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s">&#39;LINUX_DEFINE&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="p">],</span>
</span><span class='line'>          <span class="s">&#39;include_dirs&#39;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s">&#39;include/linux&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="p">],</span>
</span><span class='line'>        <span class="p">}],</span>
</span><span class='line'>        <span class="p">[</span><span class="s">&#39;OS==&quot;win&quot;&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>          <span class="s">&#39;defines&#39;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s">&#39;WINDOWS_SPECIFIC_DEFINE&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="p">],</span>
</span><span class='line'>        <span class="p">},</span> <span class="p">{</span> <span class="c"># OS != &quot;win&quot;,</span>
</span><span class='line'>          <span class="s">&#39;defines&#39;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s">&#39;NON_WINDOWS_DEFINE&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="p">],</span>
</span><span class='line'>        <span class="p">}]</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以立马看出上面这个配置文件的输出目标只有一个，也就是 <code>foo</code>，它是一个库文件（至于是静态的还是动态的这需要在生成项目时指定），它依赖的目标、宏定义、包含的头文件路径、源文件是什么，以及根据不同平台设定的不同配置等。这种定义配置文件的方式相比 CMake 来说，让我觉得更加舒服，也更加清晰，特别是当一个输出目标的配置越来越多时，使用 CMake 来管理可能会愈加混乱。</p>

<p>配置文件的编写方式是我区分 GYP 和 CMake 之间最大的不同点，当然 GYP 也有一些小细节值得注意，比如支持跨平台项目工程文件输出，Windows 平台默认是 Visual Studio，Linux 平台默认是 Makefile，Mac 平台默认是 Xcode，这个功能 CMake 也同样支持<del>，只是缺少了 Xcode</del>。Chromium 团队成员也撰文详细<a href="http://code.google.com/p/gyp/wiki/GypVsCMake">比较</a>了 GYP 和 CMake 之间的优缺点，在开发 GYP 之前，他们也曾试图转到 <a href="http://www.scons.org/">SCons</a>（这个我没用过，有经验的同学可以比较一下），但是失败了，于是 GYP 就诞生了。</p>

<p>当然 GYP 也不是没有缺点，相反，我觉得它的「缺点」一大堆：</p>

<ul>
<li>文档不够完整，项目不够正式，某些地方还保留着 Chromium 的影子，看起来像是还没有完全独立出来。</li>
<li>大量的括号嵌套，很容易让人看晕，有过 Lisp 使用经验的同学可以对号入座。对于有括号恐惧症，或者不使用现代编辑器的同学基本可以绕行。</li>
<li>为了支持跨平台，有时不得不加入某些特定平台的配置信息，比如只适用于 Visual Studio 的 <code>RuntimeLibrary</code> 配置，这不利于跨平台配置文件的编写，也无形中增加了编写复杂度。</li>
<li>不支持 <code>make clean</code>，唯一的方法就是将输出目录整个删除或者手动删除其中的某些文件。</li>
</ul>


<p>如果你已经打算尝试 GYP，那一定记得在生成项目工程文件时加上 <code>--depth</code> 参数，譬如：</p>

<pre><code>$ gyp --depth=. foo.gyp
</code></pre>

<p>这也是一个从 Chromium 项目遗留下来的历史问题。</p>

<p>也许你根本用不上跨平台特性，但是 GYP 依然值得尝试。我编写了一份 GYP 配置文件的<a href="https://github.com/xiaogaozi/princess-alist/blob/master/home/xiaogaozi/.templates/TEMPLATE.gyp.tpl">模板</a>，有兴趣的同学可以参考。GYP 和 CMake 分别代表了两种迥异的「风格」，至于孰优孰劣，还得仁者见仁，智者见智。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Rocks!]]></title>
    <link href="http://blog.xiaogaozi.org/2011/10/23/octopress-rocks/"/>
    <updated>2011-10-23T17:12:00+08:00</updated>
    <id>http://blog.xiaogaozi.org/2011/10/23/octopress-rocks</id>
    <content type="html"><![CDATA[<p>今天开始尝试 <a href="http://octopress.org/">Octopress</a>，之前也有耳闻，当时立马被它的 Geek 气息吸引，今天详细了解，Octopress 真不愧为「A blogging framework for hackers」。我用了多年的 Blogger <a href="http://xiaogaozi.blogspot.com">博客</a>也终于寿终正寝，如果你是一个非 hacker 博客作者，<a href="http://www.blogger.com/">Blogger</a> 绝对值得推荐（满足 <a href="http://www.dbanotes.net/review/gfw_rule.html">GFW 三定律</a>）。</p>

<h2>Another WordPress?</h2>

<p>Yes。Octopress 具备一个博客应当具备的所有功能，文章、评论、页面、分享、RSS、搜索、Archives 等等。</p>

<p>No。正如 Octopress 网站介绍所说：A blogging framework for hackers，重点就在最后那个 hackers。没有了 WordPress 的后台界面，写博客需要的工具仅仅是 Ruby、Git、Markdown 和你喜爱的编辑器。如果你是一个 hacker，那你对这些工具不会陌生，相比 WordPress 蹩脚的后台页面，Octopress 提供的写作方式会让你非常喜爱。</p>

<h2>写作</h2>

<p>博客最重要的功能就是写作，写作就像程序员编写代码，如果不能提供舒服的方式，那简直是一种自虐。事实已经证明 HTML 不是一种好的写作方式，因此 WordPress 这类博客提供了所见即所得编辑器，但对于喜欢精确掌控的 hacker 来说这还不够，于是类似于 Markdown 这样的标记语言逐渐在圈内盛行。这类标记语言最大的好处就是让作者不用关心文章的样式，而专注于文章的内容。这很重要，一篇文章的精髓在于文字，如果过多地被样式困扰，精力便会分散，也必然不会思考出更好的文字。类似的比较还有 Word 和 LaTeX，当然这种观点也是仁者见仁，智者见智。</p>

<p>Octopress 原生为我们提供了 Markdown 支持，需要写一篇新博客了？打开你喜欢的编辑器，使用 Markdown 语法开始书写即可。WordPress？虽然也可以添加 Markdown 支持，但不免显得蹩脚。</p>

<h2>语法高亮</h2>

<p>这个功能对程序员来说尤为重要，但至今没有博客提供原生支持，这也是最大的遗憾。Octopress 彻底颠覆了这种局面，语法高亮变得如此顺其自然。</p>

<figure class='code'><figcaption><span>rename.py</span><a href='https://raw.github.com/xiaogaozi/princess-alist/master/home/xiaogaozi/src/Python/rename.py'>download </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Batch rename utility. &lt;https://github.com/xiaogaozi/princess-alist&gt;</span>
</span><span class='line'><span class="c"># Copyright (C) &lt;2011&gt;  xiaogaozi &lt;gaochangjian@gmail.com&gt;</span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="c"># This program is free software: you can redistribute it and/or modify</span>
</span><span class='line'><span class="c"># it under the terms of the GNU General Public License as published by</span>
</span><span class='line'><span class="c"># the Free Software Foundation, either version 3 of the License, or</span>
</span><span class='line'><span class="c"># (at your option) any later version.</span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="c"># This program is distributed in the hope that it will be useful,</span>
</span><span class='line'><span class="c"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
</span><span class='line'><span class="c"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
</span><span class='line'><span class="c"># GNU General Public License for more details.</span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="c"># You should have received a copy of the GNU General Public License</span>
</span><span class='line'><span class="c"># along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">usage</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Usage&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Usage: rename.py expr files&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Main progress.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">:</span>
</span><span class='line'>        <span class="n">usage</span><span class="p">()</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expr</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;^[sy]/([^/]*)/([^/]*)/$&#39;</span><span class="p">,</span> <span class="n">expr</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">m</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;expression incorrect</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">re1</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">re2</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="c"># actually in substitute mode this portion is not regular expression</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">oldfile</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">:]:</span>
</span><span class='line'>        <span class="n">d</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">oldfile</span><span class="p">)</span>
</span><span class='line'>        <span class="n">oldname</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">oldfile</span><span class="p">)</span>
</span><span class='line'>        <span class="n">newname</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>        <span class="n">newfile</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">expr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;s&#39;</span><span class="p">:</span>  <span class="c"># substitute</span>
</span><span class='line'>            <span class="n">newname</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="n">re1</span><span class="p">,</span> <span class="n">re2</span><span class="p">,</span> <span class="n">oldname</span><span class="p">)</span>
</span><span class='line'>            <span class="n">newfile</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">newname</span><span class="p">)</span>
</span><span class='line'>            <span class="n">os</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">oldfile</span><span class="p">,</span> <span class="n">newfile</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">expr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;y&#39;</span><span class="p">:</span>  <span class="c"># transliterate</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">oldfile</span><span class="p">,</span> <span class="s">&#39;-&gt;&#39;</span><span class="p">,</span> <span class="n">newfile</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>版本控制</h2>

<p>程序员已经被版本控制惯坏了，只要能纳入版本库，就统统放进去。WordPress 拥有同样蹩脚的版本控制，显然不足以满足 hacker 的需求，Octopress 为我们提供了 Git 原生支持，一切一切都为你所控，放在你喜欢的版本控制库里即可。</p>

<h2>部署</h2>

<p>Octopress 为我们提供了三种部署方式：GitHub Pages，Heroku，Rsync，在我看来，其实就两种：免费和收费。GitHub Pages 和 Heroku 都是免费使用，Rsync 则需要你拥有自己的虚拟主机。<del>我选择了 Heroku，毕竟 GitHub Pages 本意是用来放项目介绍页面的，结果被强大的 hacker 们发掘来作为博客了⋯⋯</del> 我现在使用的是 GitHub Pages。</p>

<h2>Continue?</h2>

<p>开始享受写作的乐趣吧～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SPDY 简介]]></title>
    <link href="http://blog.xiaogaozi.org/2011/06/11/introduction-to-spdy/"/>
    <updated>2011-06-11T11:26:00+08:00</updated>
    <id>http://blog.xiaogaozi.org/2011/06/11/introduction-to-spdy</id>
    <content type="html"><![CDATA[<p>今天在看 CTF write-up 时发现<a href="http://michele.spagnuolo.me/articles/web-security/defcon-ctf19-quals-grab-bag-100-writeup.html">有人提到</a> <a href="http://dev.chromium.org/spdy">SPDY</a> 这样一个东西，貌似跟 Chrome 项目有关，于是在 Geek 原始冲动的驱使下了解了一下。</p>

<p>首先 SPDY 是一个应用层协议，它被创造出来的唯一目的就是让 Web 更快，更快，还是更快。Google 这家公司似乎很喜欢「快」这个东西，Chrome 从诞生到现在每次几乎必定宣传自己有多么得快，搞得大家已经产生了某种心理暗示。SPDY 诞生于 2009 年，其实这是对外公开发布的时间，开始研究的时间应该更早。众所周知，如今的 Web 是通过 HTTP 协议和 TCP 协议进行传输，但种种因素导致 HTTP 传输变得很慢：</p>

<ul>
<li>每一个 TCP 连接一次只能发一个 HTTP 请求，这个估计是 HTTP 协议的最大弊端。想象一下如今的网站已经包含大量的图片、CSS、JS 需要加载，如果一个请求一个请求地发，那肯定会慢死，所以浏览器通常都是通过建立多个连接来回避这个问题，但毕竟治标不治本。</li>
<li>只能由客户端主动发起 HTTP 请求，即时有时服务器知道还需要回复其它资源，它也只能等客户端先发起再回复。服务器真可怜，太被动了。</li>
<li>HTTP 头没有压缩，而且 HTTP 头也有一些冗余信息，比如 User-Agent 就没有必要每次都发来发去，太浪费带宽了。</li>
<li>数据压缩是可选的，Google 认为必须强制要求。</li>
</ul>


<p>既然 HTTP 有这么多缺点，那应该不止 Google 自己想要解决，其实是有的，本着不重复造轮子的原则 Google 列举了现有的一些改进方案：</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/HTTP_pipelining">HTTP pipelining</a>：以流水线的形式传输请求和数据，这里吐槽一下，以前在公司时 Facebook 的某牛来介绍时谈到了他们开发的 BigPipe，思想也是流水线，同样也是为了优化 Web 性能，不知道他们是不是借鉴了 HTTP pipelining，:)</li>
<li><a href="http://www.sctp.org/">SCTP</a>：用于替代 TCP 的传输层协议，提供了 multiplexed streams（多路复用流）和 stream-aware congestion control（流感知拥塞控制）</li>
<li><a href="http://pdos.csail.mit.edu/uia/sst/">SST</a>：同样用于替代 TCP 协议（TCP 同学真是众矢之的⋯⋯），也可以运行在 UDP 协议之上。</li>
<li><a href="http://www.w3.org/Protocols/MUX/">MUX</a> 和 <a href="http://www.w3.org/TR/WD-mux">SMUX</a>：运行在传输层和应用层之间的中间协议，同样提供了复用流。</li>
</ul>


<p>但是 Google 同学觉得以上这些都还不够，它要追求更大程度的性能提升。考虑到 TCP 现在应用还很广泛，想替代也不是一天两天的事情，但 HTTP 就不一样了，它是应用层的！所以说有自家的浏览器就是好办，发明个应用层协议马上就可以上线。SPDY 在刚出来的时候 Google 还在说这并不是用来替代 HTTP 协议的，它只是一个中间协议，但看看<a href="http://dev.chromium.org/spdy/spdy-protocol">最新的协议文档</a>里面已经将 SPDY 分为了两层，其中一层被描述为 HTTP-like，大有取代 HTTP 的意图（Google 最近的<a href="http://googledevelopers.blogspot.com/2012/05/spdy-performance-on-mobile-networks.html">一篇文章</a>已经直呼 SPDY 为「a replacement for HTTP」）。可以想到 Google 已经将提议提交给 IETF，也许未来的某一天我们就不再使用 HTTP 协议了。SPDY 主要有以下一些特性：</p>

<ul>
<li>multiplexed streams，一个 TCP 连接将支持无限的并发 HTTP 请求</li>
<li>请求优先级，因为现在支持并发请求，就必须得为每一个请求设置一定的优先级</li>
<li>压缩 HTTP 头，去掉多余的头信息</li>
<li>全部请求都是通过 SSL 加密，Google 认为安全网络连接必定是未来的发展方向，即使加密会微微增加一些传输时间</li>
<li>Web 服务器将能够主动发起通信，也就是 server push</li>
<li>还有一个类似的叫 server hint，不同于 server push 的是它仅仅向客户端发送一个 suggest，提示客户端需要发送一个 HTTP 请求</li>
</ul>


<p>这些改进到底能有多大提升？Google 给出的数据是 39%～55%，在丢包严重或高延迟环境下，SPDY 表现更加出色。</p>

<p>要支持 SPDY，除了客户端必须支持外，还要有相应的 Web 服务器。现在已经有 <a href="http://wiki.eclipse.org/Jetty/Feature/SPDY">Java</a>、<a href="http://code.google.com/p/mod-spdy/">Apache module</a>、<a href="http://github.com/mnot/nbhttp/tree/spdy">Python</a>、<a href="https://github.com/igrigorik/spdy">Ruby</a>、<a href="https://github.com/indutny/node-spdy">node.js</a> 等各种实现。</p>

<p>最后，如果你正在使用 Chrome 浏览器，并且访问 Google 的网站，那你已经开始使用 SPDY 了，输入 <a href="chrome://net-internals/#spdy">chrome://net-internals/#spdy</a> 还可以了解更加详细的信息。</p>
]]></content>
  </entry>
  
</feed>
